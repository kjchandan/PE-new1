apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: domain-based-stack-generator
  title: Domain-Based Stack Generator
  description: Select domain, frontend, backend, and database to generate a project scaffold
  tags:
    - generator
    - frontend
    - backend
    - database

spec:
  owner: user:your-username
  type: service

  parameters:
    - title: Project Stack Selection
      required:
        - domain
      properties:
        domain:
          title: Select a Domain
          type: string
          enum:
            - Banking
            - Insurance
            - HealthCare
            - Education

      dependencies:
        domain:
          oneOf:
            - properties:
                domain:
                  const: Banking
                frontend:
                  title: UI Framework
                  type: string
                  enum: [Vue.js, Next.js, Typescript]
                backend:
                  title: Backend Platform
                  type: string
                  enum: [Java, Python, Ruby]
                database:
                  title: Database
                  type: string
                  enum: [MYSQL, PostgreSQL]
                repoUrl:
                  title: Repository Location
                  type: string
                  ui:field: RepoUrlPicker
                  ui:options:
                    allowedHosts:
                      - github.com
                      - github.kyndryl.net
              required:
                - frontend
                - backend
                - database
                - repoUrl

            - properties:
                domain:
                  const: Insurance
                frontend:
                  title: UI Framework
                  type: string
                  enum: [React, Angular]
                backend:
                  title: Backend Platform
                  type: string
                  enum: [Scala, Go, Django]
                database:
                  title: Database
                  type: string
                  enum: [MYSQL, PostgreSQL]
                repoUrl:
                  title: Repository Location
                  type: string
                  ui:field: RepoUrlPicker
                  ui:options:
                    allowedHosts:
                      - github.com
                      - github.kyndryl.net
              required:
                - frontend
                - backend
                - database
                - repoUrl

            - properties:
                domain:
                  const: HealthCare
                frontend:
                  title: UI Framework
                  type: string
                  enum: [Three.js, ReactJs, Angular 2+]
                backend:
                  title: Backend Platform
                  type: string
                  enum: [Springboot, ASP.NET]
                database:
                  title: Database
                  type: string
                  enum: [MYSQL, PostgreSQL]
                repoUrl:
                  title: Repository Location
                  type: string
                  ui:field: RepoUrlPicker
                  ui:options:
                    allowedHosts:
                      - github.com
                      - github.kyndryl.net
              required:
                - frontend
                - backend
                - database
                - repoUrl

            - properties:
                domain:
                  const: Education
                frontend:
                  title: UI Framework
                  type: string
                  enum: [Vue.js, Next.js, Typescript, Three.js, ReactJs, Angular 2+]
                backend:
                  title: Backend Platform
                  type: string
                  enum:
                    - Java
                    - Python
                    - Ruby
                    - PHP Kotlin
                    - C sharp
                    - Perl
                    - Scala
                    - Go
                    - Djangi
                    - Springboot
                    - ASP.NET
                database:
                  title: Database
                  type: string
                  enum: [MYSQL, PostgreSQL]
                repoUrl:
                  title: Repository Location
                  type: string
                  ui:field: RepoUrlPicker
                  ui:options:
                    allowedHosts:
                      - github.com
                      - github.kyndryl.net
              required:
                - frontend
                - backend
                - database
                - repoUrl

  steps:
    - id: fetch
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          domain: ${{ parameters.domain }}
          frontend: ${{ parameters.frontend }}
          backend: ${{ parameters.backend }}
          database: ${{ parameters.database }}
          repoUrl: ${{ parameters.repoUrl }}

    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        description: Generated project for ${{ parameters.domain }} with ${{ parameters.frontend }} frontend and ${{ parameters.backend }} backend.
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in VSCode
        url: https://vscode.dev/github/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
      - title: Open in Replit
        url: https://replit.com/github/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
      - title: Open in AI Studio
        url: https://aistudio.example.com/project/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
      - title: Open in Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
